Q1: Merge string alternatively
You are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. If a string is longer than the other, append the additional letters onto the end of the merged string. Return the merged string.
Sol1:
class Solution:
    def mergeAlternately(self, word1: str, word2: str) -> str:
        i, j = 0, 0
        len1, len2 = len(word1), len(word2)
        string = ""
        while i<len1 or j<len2:
            if i<len1:
                string = string + word1[i]
                i+=1
            if j<len2:
                string = string + word2[j]
                j+=1
        return string
        
Sol2:
for c1, c2 in zip(word1, word2):
            w += c1+c2
        
        n1, n2 = len(word1), len(word2)
        if n1==n2:
            return w
        elif n1<n2:
            return w + word2[n1: n1+(n2-n1)]
        else:
            return w + word1[n2: n2+(n1-n2)]
            
            
            
Q2: Goal Parser Interpretation
You own a Goal Parser that can interpret a string command. The command consists of an alphabet of "G", "()" and/or "(al)" in some order. The Goal Parser will interpret "G" as the string "G", "()" as the string "o", and "(al)" as the string "al". The interpreted strings are then concatenated in the original order.
Given the string command, return the Goal Parser's interpretation of command.
Sol1: 
class Solution:
    def interpret(self, command: str) -> str:
        return command.replace("()","o").replace('(al)', 'al')
        
Sol2:
string =""
        for i in range(0,len(command)):
            if command[i] == 'G':
                string = string + 'G'
            elif (command[i] == 'a' )and (command[i+1] == 'l') and (i+1 != len(command)) :
                string = string + 'al'
            elif (command[i] == '(' )and (command[i+1] == ')') and (i+1 != len(command)) :
                string = string + 'o'
                    
        return string
        
        
        
        
Q3:Find the difference
You are given two strings s and t. String t is generated by random shuffling string s and then add one more letter at a random position. Return the letter that was added to t.
Sol1:
class Solution:
    def findTheDifference(self, s: str, t: str) -> str:
        s = list(s)
        t = list(t)
        for i in s:
            t.remove(i)
        return t[0]
        
Sol2:
return list((Counter(t) - Counter(s)).keys())[0]
