Q1: Reshape the Matrix
In MATLAB, there is a handy function called reshape which can reshape an m x n matrix into a new one with a different size r x c keeping its original data.
You are given an m x n matrix mat and two integers r and c representing the number of rows and the number of columns of the wanted reshaped matrix.
The reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.
If the reshape operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.

Sol1: 
class Solution:
    def matrixReshape(self, mat: List[List[int]], r: int, c: int) -> List[List[int]]:
        f = sum(mat, [])
        length = len(f)
        
        if length !=r*c:
            return mat
        
        ans = []
        m = 0
        for i in range(r):
            l=[]
            for j in range(c):
                l.append(f[m])
                m += 1
            ans.append(l)
        return ans
        
Sol2:
import numpy as np
class Solution:
    def matrixReshape(self, mat: List[List[int]], r: int, c: int) -> List[List[int]]:
        # reshape m x n matrix -> r x c matrix (original data)
        n_array = np.array(mat)
        try:
            n_array = n_array.reshape((r, c))
            return n_array
        except:
			# If transformation is not possible return original matrix
            return mat
            
            
            
            
            
Q2: Matrix Diagonal Sum
Given a square matrix mat, return the sum of the matrix diagonals.
Only include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.
Sol1:
n, sum = len(mat), 0
        for i in range(n):
            sum+= mat[i][i] + mat[i][n-i-1]
            
        if n%2 ==1:
            sum-= mat[n//2][n//2]
        return sum
        
Sol2:
res = 0
        i,j = 0, len(mat[0])-1
        for nlist in mat:
            res += nlist[i]+nlist[j] if i!=j else nlist[i]
            i += 1
            j -= 1
        return res

 
