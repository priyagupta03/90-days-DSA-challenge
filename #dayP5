Question: N-ary Tree preorder
Given the root of an n-ary tree, return the preorder traversal of its nodes' values.
Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)

Solution:
class Solution:
    def preorder(self, root: 'Node') -> List[int]:
        traversal = list()
        
        if root:
            traversal.append(root.val)
            for child in root.children:
                traversal +=self.preorder(child)
                
        return traversal
        
        
       
Question: The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.
You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.
For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.
Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.

Solution:
class Solution:
    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
        res = []
        
        for val1 in nums1:
            if val1>= max(nums2[nums2.index(val1):]):
                res += [-1]
            else:
                for val2 in nums2[nums2.index(val1):]:
                    if val2 > val1:
                        res += [val2]
                        break
        return res
        
        
        
Question: You are given an array coordinates, coordinates[i] = [x, y], where [x, y] represents the coordinate of a point. Check if these points make a straight line in the XY plane.      
        
Solution:
class Solution:
    def checkStraightLine(self, coordinates: List[List[int]]) -> bool:
        (x0,y0), (x1,y1) = coordinates[0], coordinates[1]
        for i in range(2, len(coordinates)):
            x,y = coordinates[i]
            if(x0 - x1)*(y1-y) != (x1-x)*(y0-y1):
                return False
        return True
